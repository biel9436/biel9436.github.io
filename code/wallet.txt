#!/usr/bin/python

# dictionaries to strings using json
import json
# to send requests to server
import requests
# for command-line arguments
import sys
# all the crypto stuff is here
import tommieutils as tu
import copy
import time

listnames = ["Alice", "Bob", "Carlos", "Dawn", "Eve"]

emptyPayTrans = {
    'transtype' : '1',
    'ins' : [],
    'outs' : [],
    'sigs' : []
}

emptyMinedTrans = {
    'prevmine' : '',
    'transtype' : '2',
    'outs': [],
    'nonce' : '',
    'timestamp':''
}

def main(argv):
    global username
    username = argv[0].split("pk.txt")[0].capitalize()
    userPublicKey = tu.sha256(getUserPublicKey(username))
    userPrivateKey = getUserPrivateKey(username)
    quit = False
    print("Welcome, %s." %username)
    while(not quit):
        account_details(userPublicKey)
        action = raw_input("What would you like to do? (pay, mine, quit): ")
        if (action.lower() == "pay"):
            pay_transaction(username, userPrivateKey, userPublicKey)
        elif (action.lower() == "mine"):
            print("Mining...")
            numcoins = calculate_num_coins(userPublicKey)
            mine_transaction(username, userPublicKey)
            newnumcoins = calculate_num_coins(userPublicKey)
            if(newnumcoins-50 == numcoins):
                print("Success!")
            else:
                print("There was an error with the mining")
        elif (action.lower() == "quit"):
            quit = True
        else:
            print("Requested action does not exist, please try again")
    return


def account_details(userPublicKey):
    numCoins = calculate_num_coins(userPublicKey)
    if (numCoins == 1):
        print("You current have 1 TommieCoin.")
    else:
        print("You currently have %s TommieCoins." %numCoins)


def pay_transaction(name, userPrivateKey, userPublicKey):
    correctname = False
    listnames.remove(name)
    nameslist = ", ".join(listnames)
    while(not correctname):
        recipient = raw_input("Who would you like to pay? (%s): " %nameslist)
        if (not recipient.lower().capitalize() in listnames):
            print("Name is invalid, please try again")
        else:
            correctname = True
    recipientPublicKey = tu.sha256(getUserPublicKey(recipient))
    isinteger = False
    while (not isinteger):
        amount = raw_input("How much would you like to pay? (must be an integer): ")
        try:
            amount = int(amount)
            isinteger = True
        except:
            print("Amount must be an integer")
    print("Building transaction...")
    try:
        paytrans = build_pay_transaction(recipientPublicKey, int(amount), userPrivateKey, userPublicKey)
        send_pay_transaction(paytrans)
        print("Success!")
    except ValueError:
        print("Invalid amount entered")
    except:
        print("Something went wrong")
    listnames.append(name)


def mine_transaction(name, userPublicKey):
    block_chain_request = requests.get('http://127.0.0.1:8080/showchainraw')
    block_chain = json.loads(block_chain_request.text)
    minetrans = copy.deepcopy(emptyMinedTrans)
    minetrans['prevmine'] = str(findLastMined(block_chain))
    minetrans['outs'] = [{'recipient': userPublicKey, 'value': 50}]
    minetrans['timestamp'] = time.time()
    nonce = find_nonce(minetrans)
    minetrans['nonce'] = str(nonce)
    send_mine_transaction(minetrans)


def send_mine_transaction(minetrans):
    minestr = json.dumps(minetrans, sort_keys=True)
    requests.post('http://127.0.0.1:8080/addtrans', data={'trans':minestr})


def find_nonce(minetrans):
    nonce = -1
    minehash = ''
    while(minehash[:6] != '000000'):
        nonce += 1
        minehash = tu.sha256(str(nonce) + tu.sha256(json.dumps(minetrans, sort_keys=True)))
    return nonce

def findLastMined(chain):
    numblocks = len(chain['blocks'])
    i = numblocks-1
    while (i>=0):
        if (chain['blocks'][i]['transactions']['transtype']=='2'):
            break
        i -= 1
    return i

def build_pay_transaction(recipientPublicKey, amount, userPrivateKey, userPublicKey):
    block_chain_request = requests.get('http://127.0.0.1:8080/showchainraw')
    block_chain = json.loads(block_chain_request.text)
    receivedcoins = get_all_received_coins(block_chain, userPublicKey)
    usedcoins = getAllUsedCoins(block_chain)
    valid_coin_indices = determine_valid_coins(receivedcoins, block_chain, userPublicKey)

    if amount > sum_coins(valid_coin_indices) or amount == 0:
        raise ValueError
    else:
        coins = determine_best_coins(valid_coin_indices, amount)
        paytrans = copy.deepcopy(emptyPayTrans)
        paytrans['outs'] = get_outs(coins, recipientPublicKey, userPublicKey, amount)
        paytrans['ins'] = removeValue(coins)
        paytrans['sigs'] = [{'pk':getUserPublicKey(username), 'signature': tu.sign(userPrivateKey, json.dumps(paytrans, sort_keys=True))}]
        return paytrans


def send_pay_transaction(paytrans):
    paystr = json.dumps(paytrans, sort_keys=True)
    requests.post('http://127.0.0.1:8080/addtrans', data={'trans':paystr})


def removeValue(coins):
    for coin in coins:
        coin.pop('value')
    return coins


def get_outs(coins, recipientPK, userPK, amount):
    sumcoins = sum_coins(coins)
    remainder = int(sumcoins) - int(amount)
    outs = [{'recipient': userPK, 'value': int(remainder)}, {'recipient': recipientPK, 'value': int(amount)}]
    return outs


def determine_best_coins(valid_coin_indices, amount):
    curValue = 0
    coins = []
    while curValue < amount:
        index = findGreatestCoin(valid_coin_indices)
        curValue += int(valid_coin_indices[index]['value'])
        coins.append(valid_coin_indices[index])
        valid_coin_indices.pop(index)
    return coins


def findGreatestCoin(coins):
    curGreatestCoin = coins[0]
    curGreatestValue = int(curGreatestCoin['value'])
    for coin in coins:
        if (int(coin['value']) > curGreatestValue):
            curGreatestCoin = coin
            curGreatestValue = int(curGreatestCoin['value'])
    return coins.index(curGreatestCoin)


def getUserPublicKey(name):
    userPublicKeyFile = "./keys/" + name.lower() + "pk.txt"
    userPublicKeyFile = open(userPublicKeyFile, "r")
    userPublicKey = userPublicKeyFile.read()
    return userPublicKey


def getUserPrivateKey(name):
    userPrivateKeyFile = "./keys/" + name.lower() + "sk.txt"
    userPrivateKeyFile = open(userPrivateKeyFile, "r")
    userPrivateKey = userPrivateKeyFile.read()
    return userPrivateKey


def calculate_num_coins(userPublicKey):
    block_chain_request = requests.get('http://127.0.0.1:8080/showchainraw')
    block_chain = json.loads(block_chain_request.text)
    all_recieved_coins = get_all_received_coins(block_chain, userPublicKey)
    valid_coins = determine_valid_coins(all_recieved_coins, block_chain, userPublicKey)
    return sum_coins(valid_coins)


def determine_valid_coins(receivedcoins, block_chain, userPublicKey):
    coinindices = []
    usedcoins = getAllUsedCoins(block_chain)
    for coin in receivedcoins:
        index = 0
        for outs in block_chain['blocks'][block_chain['blocks'].index(coin)]['transactions']['outs']:
            if outs['recipient'] == userPublicKey:
                coinindices.append({'transid':block_chain['blocks'].index(coin), 'outnum': index, 'value': int(block_chain['blocks'][block_chain['blocks'].index(coin)]['transactions']['outs'][index]['value'])})
                index = 0
            else:
                index += 1
    pairsToBeRemoved = []
    for pair in coinindices:
        compare = (pair['transid'], pair['outnum'])
        if compare in usedcoins:
            pairsToBeRemoved.append(pair)
    for pair in pairsToBeRemoved:
        coinindices.remove(pair)
    return coinindices


def get_all_received_coins(block_chain, userPublicKey):
    usedcoins = getAllUsedCoins(block_chain)
    all_recieved_coins = []
    for block in block_chain['blocks']:
        currtrans = block['transactions']
        outs = currtrans['outs']
        for recipient in outs:
            if(recipient['recipient'] == userPublicKey):
                all_recieved_coins.append(block)
    return all_recieved_coins


def sum_coins(coinindices):
    sum = 0
    for index in coinindices:
        sum += index['value']
    return sum


def getAllUsedCoins(chain):
    used = []
    for block in chain['blocks']:
        currtrans = block['transactions']
        if (currtrans['transtype']=='1'):
            currins = [(x['transid'],x['outnum']) for x in currtrans['ins']]
            used.extend(currins)
    return used


if __name__ == "__main__":
    main(sys.argv[1:])
